{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":"<p>Warning</p> <p>WIP. Until v1.0.0 is released, API is subject to drastic changes.</p> <p> </p> <p>Run safe and cross-platform bash commands using Python 3.14's t-strings</p> <p>Uses brush for a cross-platform bash implementation.</p> <pre><code>from tshu import sh\nawait sh(t\"uv add tshu\")\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>uv add tshu\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from tshu import sh\n</code></pre>"},{"location":"#run-a-bash-command","title":"Run a bash command.","text":"<p>Always use a t-string, regular strings are not allowed to prevent accidental usage of f-strings.</p> <pre><code>await sh(t\"cat /usr/share/dict/words | wc -l\")\n</code></pre>"},{"location":"#run-a-bash-command-with-user-input","title":"Run a bash command with user input","text":"<p>You still need to quote substitutions to prevent word-splitting. Word-splitting is a feature, not a vuln.</p> <p>Substitutions use variables to prevent shell injection. These temporary variables are not accessible by child programs as they are not exported and have random names.</p> <pre><code>await sh(t'cat \"{__file__}\" | wc -l')\n</code></pre>"},{"location":"#exit-code-and-check","title":"Exit code and check","text":"<p>By default, awaiting a command returns the exit code. tshu.CommandError is raised when a command returns a non-zero exit code. To disable this behaviour, either pass <code>check=False</code> to <code>sh</code> or set <code>sh.check = False</code> to disable checking globally.</p>"},{"location":"#suppress-command-output","title":"Suppress command output","text":"<p>Either pass <code>quiet=True</code> or set <code>sh.quiet = True</code> to suppress output globally.</p>"},{"location":"#change-working-directory","title":"Change working directory","text":"<p>Either pass <code>cwd=...</code> or set <code>sh.cwd = \"...\"</code>. You can use <code>pathlib.Path</code>.</p>"},{"location":"#set-environment-variables","title":"Set environment variables","text":"<p>Either modify <code>os.environ</code> or pass <code>env={}</code>. These are exported, so accessible to child programs, use substitutions to pass user input.</p>"},{"location":"#pass-standard-input","title":"Pass standard input","text":"<p>input can be string or bytes.</p> <pre><code>assert await sh(t\"wc -l\", input=\"1\\n2\\n3\\n\").json() == 3\n</code></pre>"},{"location":"#capture-the-stdout-stderr-of-a-program","title":"Capture the stdout, stderr of a program","text":"<pre><code>result = await sh(t\"help\").output()\nresult.returncode\nresult.stdout\nresult.stderr\n</code></pre>"},{"location":"#get-standard-output-directly","title":"Get standard output directly","text":"<p>Use <code>.text()</code> to directly get the output as string (utf-8 encoded).</p> <pre><code>contents = await sh(t\"cat file.txt\").text()\n</code></pre>"},{"location":"#get-standard-output-directly-as-bytes","title":"Get standard output directly as bytes","text":"<pre><code>contents = await sh(t\"cat file.bin\").bytes()\n</code></pre>"},{"location":"#get-standard-output-parsed-as-json","title":"Get standard output parsed as JSON","text":"<pre><code>data = await sh(t\"cat file.json\").json()\n</code></pre>"},{"location":"reference/command-error/","title":"CommandError","text":"<p>               Bases: <code>Exception</code></p> <p>Command return code was non-zero.</p>"},{"location":"reference/command-error/#tshu.CommandError.returncode","title":"<code>returncode: int = returncode</code>  <code>instance-attribute</code>","text":"<p>Exit status of the child process.</p>"},{"location":"reference/command-error/#tshu.CommandError.stderr","title":"<code>stderr: bytes | None = stderr</code>  <code>instance-attribute</code>","text":"<p>Captured standard error.</p>"},{"location":"reference/command-error/#tshu.CommandError.stdout","title":"<code>stdout: bytes | None = stdout</code>  <code>instance-attribute</code>","text":"<p>Captured standard output.</p>"},{"location":"reference/command/","title":"Command","text":"<p>Awaitable shell command.</p> <p>By default, awaiting a command returns the exit-code. Use one of the methods such as <code>.output()</code> to modify the return value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; returncode = await sh(t\"echo hello world\")\nhello world\n&gt;&gt;&gt; returncode\n0\n</code></pre> <p>Construct a command.</p> <p>Parameters:</p> Name Type Description Default <code>Template</code> <p>t-string template for command.</p> required <code>bool | None</code> <p>Suppress stdout and stderr from displayed in the terminal.</p> <code>None</code> <code>bool | None</code> <p>Raise exception when command return code is non-zero.</p> <code>None</code> <code>str | bytes | None</code> <p>Pass standard input to command.</p> <code>None</code> <code>str | Path | None</code> <p>Shell's working directory.</p> <code>None</code> <code>dict[str, str] | None</code> <p>Dictionary of environment variables.</p> <code>None</code>"},{"location":"reference/command/#tshu.Command(command)","title":"<code>command</code>","text":""},{"location":"reference/command/#tshu.Command(quiet)","title":"<code>quiet</code>","text":""},{"location":"reference/command/#tshu.Command(check)","title":"<code>check</code>","text":""},{"location":"reference/command/#tshu.Command(input)","title":"<code>input</code>","text":""},{"location":"reference/command/#tshu.Command(cwd)","title":"<code>cwd</code>","text":""},{"location":"reference/command/#tshu.Command(env)","title":"<code>env</code>","text":""},{"location":"reference/command/#tshu.Command.check","title":"<code>check: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Raise exception when command return code is non-zero. Globally affects all command invocations.</p>"},{"location":"reference/command/#tshu.Command.cwd","title":"<code>cwd: str | Path | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Shell's working directory. (Defaults to current working directory) Globally affects all command invocations.</p>"},{"location":"reference/command/#tshu.Command.quiet","title":"<code>quiet: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Suppress stdout and stderr from displayed in the terminal. Globally affects all command invocations.</p>"},{"location":"reference/command/#tshu.Command.bytes","title":"<code>bytes() -&gt; Command[str]</code>","text":"<p>Stdout returns as bytes.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; await sh(t\"echo hello\").bytes()\nb'hello\\n'\n</code></pre>"},{"location":"reference/command/#tshu.Command.json","title":"<code>json() -&gt; Command[Any]</code>","text":"<p>Stdout returns as JSON.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; await sh(t\"echo {json.dumps({\"hello\": \"world\"})}\").json()\n{'hello': 'world'}\n</code></pre>"},{"location":"reference/command/#tshu.Command.output","title":"<code>output() -&gt; Command[CompletedCommand]</code>","text":"<p>Capture stdout and stderr as bytes.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; await sh(t\"echo hello\").output()\nCompletedCommand(returncode=0, stdout=b'hello\\n', stderr=b'')\n</code></pre>"},{"location":"reference/command/#tshu.Command.text","title":"<code>text() -&gt; Command[str]</code>","text":"<p>Stdout returns as string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; await sh(t\"echo hello\").text()\nhello\n</code></pre>"},{"location":"reference/command/#tshu.Command.toml","title":"<code>toml() -&gt; Command[Any]</code>","text":"<p>Stdout returns as TOML.</p>"},{"location":"reference/command/#tshu.Command.yaml","title":"<code>yaml() -&gt; Command[Any]</code>","text":"<p>Stdout returns as YAML.</p>"},{"location":"reference/completed-command/","title":"CompletedCommand","text":"<p>Result of a command that captures it's output.</p>"},{"location":"reference/completed-command/#tshu.CompletedCommand.returncode","title":"<code>returncode: int</code>  <code>instance-attribute</code>","text":"<p>Exit status of the child process. Typically, an exit status of 0 indicates that it ran successfully.</p>"},{"location":"reference/completed-command/#tshu.CompletedCommand.stderr","title":"<code>stderr: bytes</code>  <code>instance-attribute</code>","text":"<p>Captured standard error.</p>"},{"location":"reference/completed-command/#tshu.CompletedCommand.stdout","title":"<code>stdout: bytes</code>  <code>instance-attribute</code>","text":"<p>Captured standard output.</p>"}]}